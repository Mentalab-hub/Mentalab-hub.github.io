---
title: "Photodiode Event Triggers"
date: 2022-01-26T10:25:19+00:00
weight: 4
description: Here is how a step-by-step guide to creating event triggers using a photodiode as you acquire data using Mentalab Explore
slug: photodiode-event-trigger
hidden: "true"
---

Synchronizing ExG signals with stimuli is critical to many research paradigms. There are two main approaches to synchronizing data: software event markers and hardware triggers. 

Although software event markers are easy to use, they are not as precise as hardware triggers. This is because the data is sent via Bluetooth, which has some inherent delays. 

Meanwhile, hardware triggers are much more precise but involve connecting a wire between devices (e.g. a computer and an Explore device). This means your Mentalab Explore system is no longer fully wireless (although presenting stimuli on a mobile can mitigate this).

The current version of the Explore system does not have a trigger input pin. Therefore, one of ExG channels has to be used for trigger input. In some experiments where visual stimuli are presented on a screen, a photosensor can be used to transmit triggers and synchronize the ExG signal with visual stimuli very precisely. In this tutorial, we demonstrate how we can setup such a system.

## Set-up
<figure style="float:right;">
<img style="border: 1px solid #ddd; box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19); border-radius: 4px; margin: 15px; padding: 5px;" src="https://fyi.cpg.mybluehost.me/wp-content/uploads/2022/01/photodiode.png" alt="OPT101 photosensor" width="400"/>
<figcaption style="color:gray;text-align:center;"> OPT101 photosensor.</figcaption>
</figure>

Obtain a [OPT101 photosensor](https://www.amazon.de/-/en/Ba30DEllylelly-OPT101-analogue-intensity-monolithic/dp/B08FYJV12J/ref=sr_1_11?dchild=1&keywords=Fotodiode&qid=1634715575&sr=8-11), or any other photosensor that has a short rise/fall time.

Connect the photosensor using the following connection combinations.

| &nbsp; In | &nbsp; Out | 
| ----------- | ----------- |
| OPT101 pins | Explore / power supply |
| Vcc | 5V on power supply |
| -V and COM | Explore Ground and power supply Ground |
| 1M and OUT | CH1 of Explore device |

## Create stimuli
The following is a simple code snippet in Python to show a black rectangle on the screen every second using [PsychoPy](https://www.psychopy.org/).

```
import time
from psychopy import visual

isi = .5

win = visual.Window(size=(600, 800), fullscr=True, screen=1, color=[1, 1, 1])
stim = visual.Rect(win, size=(.5, .5), fillColor='black', pos=(-.75, -.75))

time.sleep(1)
delays = []
for i in range(500):
    stim.draw()
    win.flip()
    time.sleep(isi)
    win.flip()
    time.sleep(isi)

time.sleep(5)
```

We can then use the on-screen color change created by the stimulus as an event trigger. The following video shows how the on-screen stimulus corresponds to changes in the channel 1 signal.
<div class="video-container">
<iframe src="https://www.youtube-nocookie.com/embed/KPlwJewogJ4" title="Photodiode trigger" frameborder="0" allow="accelerometer; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
</div>
<br>
{{< alert style="info" >}} The visualization in the recorded video applies a notch filter which causes some distortion in the signal. When you are recording raw data, the square wave is cleaner. {{< /alert >}}

## Delay and jitter measurements
The following code snippet allows you to measure the delay and jitter of your event markers as they are recorded by your device.

```
import time
from psychopy import visual
from explorepy import Explore

isi = .5

explore = Explore()
explore.connect('Explore_CA12')
explore.record_data(file_name='rec_01', file_type='csv', do_overwrite=False)

win = visual.Window(size=(600, 800), fullscr=True, screen=1, color=[1, 1, 1])
stim = visual.Rect(win, size=(.5, .5), fillColor='black', pos=(-.75, -.75))

time.sleep(1)
delays = []
for i in range(500):
    stim.draw()
    win.flip()
    explore.set_marker(10)
    time.sleep(isi)
    win.flip()
    time.sleep(isi)

time.sleep(5)
explore.stop_recording()
```

## Experiment
Finally, we can create an experiment and record CSV files to drive. The files can be imported in Python and the delay i.e. time distance between the rise of the signal of channel 1 and the event marker can be computed as follows.

```
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import scipy.signal as signal

fs = 250  # Sampling rate
n_max = int(fs/3)
exg_filename = 'FILENAME_ExG.csv'
marker_filename = 'FILENAME_Marker.csv'

exg = pd.read_csv(exg_filename)
markers = pd.read_csv(marker_filename)

sig = exg['ch1'].to_numpy()
ts_sig = exg['TimeStamp'].to_numpy()
ts_marker = markers['TimeStamp'].to_numpy()
sig_diff = -1*np.diff(sig)
peaks, _ = signal.find_peaks(sig_diff, threshold=1000)

epochs = np.zeros((500, n_max))
epochs_sig = np.zeros((500, n_max))
delays = []
for i, event_ts in enumerate(ts_marker):
    idx = np.argmax(ts_sig > event_ts)
    ind_jump = np.argmax(sig_diff[idx:idx+n_max]>1)
    if ts_sig[idx+ind_jump]-event_ts < 0:
        print('error')
    delays.append(ts_sig[idx+ind_jump]-event_ts)
    print(i, ind_jump, ts_sig[idx+ind_jump]-event_ts)
    epochs[i, :] = sig_diff[idx:idx+n_max]
    epochs_sig[i, :] = sig[idx:idx+n_max]

print(np.array(delays).mean(), np.array(delays).std())

plt.plot(np.array(delays)*1000)
plt.title(f'Delays: mean={np.array(delays).mean()*1000:.1f} ms, Std={np.array(delays).std()*1000:.1f} ms')
plt.xlabel('Trial')
plt.ylabel('Delay (ms)')
plt.show()
```

For more information or support, do not hesitate to get in contact at: <support@mentalab.com>

